<!DOCTYPE html>
<html xmlns:th="http://www.thymeleaf.org">
<body>

	<script type="text/javascript" th:fragment="javascript">
		$(document).ready(function() {

			$("#buscar_producto").autocomplete({

				/* source hace la peticion ajax y select la procesa*/
				source : function(request, response) {
					$.ajax({
						url : "/factura/cargar-productos/" + request.term,
						dataType : "json",
						data : {
							term : request.term
						},
						/* Se encarga de recibir los datos en formato json 
							y se pasan / generan al autocomplete
						*/
						success : function(data) {
							/* Se pasan al autocomplete. 
							   Map procesa cada elemento del array que contiene data. 
							   Retorna datos por cada item */
							response($.map(data, function(item) {
								return {
									value : item.id,
									label : item.nombre,
									precio : item.precio,
								};
							}));
						},
					});
				},
				/* 
				   Metodo select: realiza cualquier tipo tarea despues 
				   de tener un elemento del autocomplete.
				   ej: crea linea de factura a traves de una tabla dinamica. 
				   Pasa nombre del item a valor al campo buscar producto.
				 */
				select : function(event, ui) {
					//$("#buscar_producto").val(ui.item.label);
					
					/* Validamos que el producto exista antes de crear la linea.
					Y luego invocamos el metodo incrementar cantidad. */
					if(itemsHelper.hasProducto(ui.item.value)){
						itemsHelper.incrementaCantidad(ui.item.value, ui.item.precio);
						return false;
					}
					
					/* 
					Aqui se crea la linea de la factura.					
					Obtiene contenido html del elemento de la plantilla 
					a traves del id="plantillaItemsFactura" y reemplaza los valores 
					*/
					var linea = $("#plantillaItemsFactura").html();
					
					/* Aqui se asignan los valores de la linea de la factura 
					al objeto ui para se manipulados. */
					linea = linea.replace(/{ID}/g, ui.item.value);
					linea = linea.replace(/{NOMBRE}/g, ui.item.label);
					linea = linea.replace(/{PRECIO}/g, ui.item.precio);
					
					/* Desplega los valores en el tbody de la tabla */
					$("#cargarItemProductos tbody").append(linea);
					itemsHelper.calcularImporte(ui.item.value, ui.item.precio, 1);
					
					return false;
				}
			});
			
			/* Eliminamos el "plantillaItemsFactura" justo antes de enviar el formulario factura 
			para que no tome el input de la plantilla como si fuera una linea màs y va a lanzar 
			error porque el item_id[] cotiene un valor string que no es numerico {ID}. 
			*/
			$("form").submit(function(){
				$("#plantillaItemsFactura").remove();
				return;
			});
			
		});
		
		/* Variable clase js que permitirà de usar algunos metodos helper para las lineas de factura */
		var itemsHelper = {
			/* Metodo calcular importe. */	
			calcularImporte : function(id, precio, cantidad){
				$("#total_importe_" + id).html(parseInt(precio) * parseInt(cantidad));
				/* Actualizamos el gran total */
				this.calcularGranTotal();
			},
			/* Metodo para controlar cuando se inserta un mismo producto en la linea factura. */
			hasProducto : function(id){
				var resultado = false;
				
				/* Por cada input con este nombre se pregunta si el id que se pasa es igual 
				   al valor de algun elemento de la lista de lineas. */
				$('input[name = "item_id[]"]').each(function(){
					if(parseInt(id) == parseInt($(this).val()) ){
						resultado = true;
					}
				});
				return resultado;				
			},
			/* Metodo que incrementa la cantidad de la linea exixtente. */
			incrementaCantidad: function(id, precio){
				/* Preguntamos si el id tiene cantidad, la convertimos a integer, si no retorna 0. */
				var cantidad = $("#cantidad_" + id).val() ? parseInt($("#cantidad_" + id).val()) : 0;
				/* Obtenemos, incrementamos y se la devolvemos al input cantidad. */
				$("#cantidad_" + id).val(++cantidad);
				/* Luego se calcula nuevamnete el importe, se actualiza. */
				this.calcularImporte(id, precio, cantidad);
			},
			/* Entre metodos se separa con ','. */
			eliminarLineaFactura : function(id){
				/* Con JQuery se obtiene el elemnto y se elimina*/
				$('#row_' + id).remove();
				/* Actualizamos el gran total */
				this.calcularGranTotal();
			},
			calcularGranTotal: function(){
				var total = 0;
				/* Por cada span encontrado con total importe. Usando ExReg */
				$('span[id^="total_importe_"]').each(function(){
					/* Obtenemos su contenido html y se van sumando */
					total += parseInt($(this).html());
				});
				/* Se asigna el total al gran total de la vista factura/form.
				Cada ves que cambia la cantidad o se elimina hay que actualizar el gran total. */
				$('#gran_total').html(total);
			}
		}
	</script>

</body>
</html>