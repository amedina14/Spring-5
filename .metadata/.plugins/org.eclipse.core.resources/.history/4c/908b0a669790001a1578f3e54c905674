package com.bolsadeideas.springboot.app.controllers;

import java.util.List;
import java.util.Map;

import javax.validation.Valid;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.validation.BindingResult;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.bind.annotation.SessionAttributes;
import org.springframework.web.bind.support.SessionStatus;
import org.springframework.web.servlet.mvc.support.RedirectAttributes;

import com.bolsadeideas.springboot.app.models.entity.Cliente;
import com.bolsadeideas.springboot.app.models.entity.Factura;
import com.bolsadeideas.springboot.app.models.entity.ItemFactura;
import com.bolsadeideas.springboot.app.models.entity.Producto;
import com.bolsadeideas.springboot.app.models.service.IClienteService;

@Controller
@RequestMapping("/factura")
/*
 * Importante mantener el objeto factura en una sesion hasta que se procesa el
 * form y se guarda en la DB con sus lineas y cliente.
 */
@SessionAttributes("factura")
public class FacturaController {

	@Autowired
	private IClienteService clienteService;

	private final Logger log = LoggerFactory.getLogger(getClass());

	/* Metodo para ver el detalle de la Factura */
	@GetMapping("/ver/{id}")
	public String ver(@PathVariable(value = "id") Long id, Model model, RedirectAttributes flash) {

		/* Lo primero es obtener la factura por el id. */
		Factura factura = clienteService.findFacturaById(id);

		/* Buena practica validar si la factura es null */
		if (factura == null) {
			model.addAttribute("error", "La factura no existe en la base de datos.");
			return "redirect:/listar";
		}

		/* Se pasa la factura a la vista. */
		model.addAttribute("factura", factura);
		model.addAttribute("titulo", "Scontrino: ".concat(factura.getDescripcion()));

		return "factura/ver";
	}

	/* Metodo para desplegar el formulario Factura en la vista. */
	@GetMapping("/form/{clienteId}")
	public String crear(@PathVariable(value = "clienteId") Long clienteId, Map<String, Object> model,
			RedirectAttributes flash) {

		/* Se utiliza el servicio cliente inyectado por la interfaz. */
		Cliente cliente = clienteService.findOne(clienteId);

		if (cliente == null) {
			flash.addFlashAttribute("error", "El cliente no existe en la base de datos.");
			return "redirect:/listar";
		}

		/* Crea el objeto factura y lo relaciona al cliente */
		Factura factura = new Factura();
		factura.setCliente(cliente);

		/*
		 * Pasa el objeto factura para el despliegue en la vista form/factura. El put
		 * funciona por el "Map<String, Object>".
		 */
		model.put("factura", factura);
		model.put("titulo", "Crear Fattura");

		return "factura/form";
	}

	/* Usa la ruta del file javascript autocomplete */
	@GetMapping(value = "/cargar-productos/{term}", produces = { "application/json" })
	/*
	 * ResponseBody transforma la salida en json y la guarda dentro del response
	 * body sin cargar la vista thymeleaf.
	 */
	public @ResponseBody List<Producto> cargarProductos(@PathVariable String term) {
		return clienteService.findByNombre(term);
	}

	/*
	 * Implementar el metodo guardar para guardar las lineas de la factura.
	 * Recibimos los datos del form, la factura, sus lineas. Implementar la logica
	 * para persistir y guardar la factura en el DB.
	 * 
	 * Metodo handler o de accion del controller y va mapeado. El tipo de peticion
	 * es Post, porque envìa.
	 * 
	 * Pero tambien tenemos que recibir los datos que estan en los input de
	 * plantilla-items, como el "id" y la "cantidad". Por eso usamos el
	 * RequestParam.
	 * 
	 * Valid, habilita la validaciòn en el objeto factura.
	 */
	@PostMapping("/form")
	public String guardar(@Valid Factura factura, BindingResult result, Model model,
			@RequestParam(name = "item_id[]", required = false) Long[] itemId,
			@RequestParam(name = "cantidad[]", required = false) Integer[] cantidad, RedirectAttributes flash,
			SessionStatus status) {

		/* Si la factura tiene error, devuelve al formulario */
		if (result.hasErrors()) {
			model.addAttribute("titulo", "Crear Factura");
			return "factura/form";
		}

		/*
		 * Controla si el item en null o length = 0, devuelve al formulario con mensaje
		 * de error.
		 */
		if (itemId == null || itemId.length == 0) {
			model.addAttribute("titulo", "Crear Factura");
			model.addAttribute("error", "Error: La factura NO puede no tener lineas!.");
			return "factura/form";
		}

		for (int i = 0; i < itemId.length; i++) {
			/*
			 * Por cada linea obtengo el producto. Instancio el producto, inicializo e
			 * invoco el metodo findProductoById desde la interface pricipal.
			 */
			Producto producto = clienteService.findProductoById(itemId[i]);

			/*
			 * Se crea instancia de itemFactura linea, y le pasamos el producto y la
			 * cantidad. Luego se agrega la linea a la factura ".addItemFactura(linea)".
			 */
			ItemFactura linea = new ItemFactura();
			linea.setCantidad(cantidad[i]);
			linea.setProducto(producto);
			factura.addItemFactura(linea);

			log.info("ID: " + itemId[i].toString() + ", cantidad: " + cantidad[i].toString());
		}

		/* Guarda la factura con el metodo de facturaDao, luego completa la sesion */
		clienteService.saveFactura(factura);
		status.setComplete();

		flash.addFlashAttribute("success", "Factura creada con exito!");

		/*
		 * Una ves creada la factura lo redirecciona a detalle del cliente con el ID,
		 * usando la relacion de clases y entidades.
		 */
		return "redirect:/ver/" + factura.getCliente().getId();
	}

	@RequestMapping(value = "/eliminar/{id}")
	public String eliminar(@PathVariable Long id, Model model, RedirectAttributes flash) {
		
		if(id > 0) {
			Factura factura = clienteService.findFacturaById(id);
			clienteService.deleteFactura(id);
			
		}

		return "ver";
	}

}
